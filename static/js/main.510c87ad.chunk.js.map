{"version":3,"sources":["constants/account.ts","components/Loader.tsx","utils/getContractInstance.ts","utils/web3.ts","constants/voteStatus.ts","containers/AccountStatus.tsx","containers/AddVoter.tsx","containers/NextStep.tsx","containers/Proposal.tsx","containers/Main.tsx","containers/Web3.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AccountStatus","Loader","message","Box","display","flexDirection","alignItems","CircularProgress","mt","Typography","AccountsStatusLabel","Administrator","Voter","Unknown","getContractInstance","web3","a","eth","net","getId","networkId","deployedNetwork","Voting","networks","Contract","abi","address","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","Web3","enable","console","log","provider","providers","HttpProvider","VoteStatus","VoteStatusLabel","RegisteringVoters","ProposalsRegistrationStarted","ProposalsRegistrationEnded","VotingSessionStarted","VotingSessionEnded","VotesTallied","AccountStatusContainer","account","voteStatus","boxProps","p","bgcolor","variant","my","status","AddVoterContainer","contractInstance","enqueueSnackbar","useSnackbar","useState","addressInputValue","setAddressInputValue","isAddVoterPending","setIsAddVoterPending","addVoter","useCallback","methods","send","from","mb","TextField","label","fullWidth","onChange","e","target","value","Button","color","disabled","onClick","NextStepContainer","isUpdatingVoteStatus","setIsUpdatingVoteStatus","updateVoteStatus","startProposalsRegistration","endProposalsRegistration","startVotingSession","endVotingSession","tally","Error","ProposalContainer","proposals","setProposals","proposalInputValue","setProposalInputValue","isAddProposalPending","setIsAddProposalPending","isVoting","setIsVoting","fetchProposals","getProposalCount","call","proposalsLength","promises","i","push","all","res","fetchedProposals","map","r","index","description","voteCount","parseInt","proposalId","toString","addProposal","vote","useEffect","events","ProposalRegistered","error","event","returnValues","newProposal","currentProposals","maxVoteCount","reduce","acc","winningProposals","filter","Voted","proposal","totalVoteCount","length","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","component","scope","votedProposalId","IconButton","join","MainContainer","setVoteStatus","fetchVoteStatus","workflowStatus","response","WorkflowStatusChange","newStatus","Stepper","activeStep","alternativeLabel","Object","values","k","Step","StepLabel","Grid","container","spacing","item","xs","Web3Container","setWeb3","setContractInstance","contractOwnerAddress","setContractOwnerAddress","accountAddress","setAccountAddress","setAccount","init","owner","ownerAddress","warn","refreshAccountStatus","toLowerCase","voters","isRegistered","getAccounts","then","accounts","catch","on","currentAccount","voter","App","maxSnack","anchorOrigin","horizontal","vertical","AppBar","position","Container","maxWidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"wt5RAAYA,E,sICOCC,EAAoB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClC,OACE,eAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,SAASC,WAAW,SAAtD,UACE,cAACC,EAAA,EAAD,IACA,cAACJ,EAAA,EAAD,CAAKK,GAAI,EAAT,SACE,cAACC,EAAA,EAAD,UAAaP,U,kBDZTF,O,iCAAAA,I,iBAAAA,I,sBAAAA,M,KAqBL,IAAMU,GAAuD,mBACjEV,EAAcW,cAAgB,kBADmC,cAEjEX,EAAcY,MAAQ,UAF2C,cAGjEZ,EAAca,QAAU,WAHyC,G,SElBvDC,EAAmB,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACJD,EAAKE,IAAIC,IAAIC,QADT,cAC3BC,EAD2B,OAE3BC,EAAkBC,EAAOC,SAASH,GAFP,kBAG1B,IAAIL,EAAKE,IAAIO,SAASF,EAAOG,IAAYJ,GAAmBA,EAAgBK,UAHlD,2CAAH,sD,kBCDzB,SAAeC,IAAtB,+B,4CAAO,sBAAAX,EAAA,+EACE,IAAIY,SAAQ,SAACC,EAASC,GAE1BC,OAAeC,iBAAiB,OAAjC,sBAAyC,kCAAAhB,EAAA,0DAElCe,OAAeE,SAFmB,wBAG/BlB,EAAO,IAAImB,IAAMH,OAAeE,UAHD,kBAM5BF,OAAeE,SAASE,SANI,OAQnCN,EAAQd,GAR2B,gDAUnCe,EAAO,EAAD,IAV6B,gCAc7BC,OAAehB,MAEjBA,EAAQgB,OAAehB,KAC7BqB,QAAQC,IAAI,2BACZR,EAAQd,KAIFuB,EAAW,IAAIJ,IAAKK,UAAUC,aAAa,yBAC3CzB,EAAO,IAAImB,IAAKI,GACtBF,QAAQC,IAAI,gDACZR,EAAQd,IAzB6B,8DAHtC,4C,4BCFK0B,E,8CAAAA,O,yCAAAA,I,+DAAAA,I,2DAAAA,I,+CAAAA,I,2CAAAA,I,gCAAAA,M,KASL,IAAMC,GAAgD,mBAC1DD,EAAWE,kBAAoB,8BAD2B,cAE1DF,EAAWG,6BAA+B,2BAFgB,cAG1DH,EAAWI,2BAA6B,mBAHkB,cAI1DJ,EAAWK,qBAAuB,iBAJwB,cAK1DL,EAAWM,mBAAqB,mBAL0B,cAM1DN,EAAWO,aAAe,gBANgC,G,QCChDC,EAAoC,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,WAAeC,EAAe,wCACzF,OACE,eAACjD,EAAA,EAAD,yBAAKkD,EAAG,EAAGC,QAAQ,SAAYF,GAA/B,cACE,cAAC3C,EAAA,EAAD,CAAY8C,QAAQ,KAApB,0BACA,cAACpD,EAAA,EAAD,CAAKqD,GAAI,EAAT,SACE,eAAC/C,EAAA,EAAD,CAAY8C,QAAQ,QAApB,sBAAsC7C,EAAoBwC,EAAQO,aAEpE,cAACtD,EAAA,EAAD,CAAKqD,GAAI,EAAT,SACE,eAAC/C,EAAA,EAAD,CAAY8C,QAAQ,QAApB,wBAAwCL,EAAQxB,aAEjDyB,IAAeV,EAAWE,mBAAqBO,EAAQO,SAAWzD,EAAca,SAC/E,cAACJ,EAAA,EAAD,wF,kBCXKiD,EAA+B,SAAC,GAAgD,IAA9CR,EAA6C,EAA7CA,QAASS,EAAoC,EAApCA,iBAAqBP,EAAe,8CAClFQ,EAAoBC,cAApBD,gBADkF,EAExCE,mBAAiB,IAFuB,mBAEnFC,EAFmF,KAEhEC,EAFgE,OAGxCF,oBAAkB,GAHsB,mBAGnFG,EAHmF,KAGhEC,EAHgE,KAKpFC,EAAWC,sBAAW,uCAC1B,WAAO1C,GAAP,SAAAV,EAAA,6DACEkD,GAAqB,GADvB,kBAGUP,EAAiBU,QAAQF,SAASzC,GAAS4C,KAAK,CAAEC,KAAMrB,EAAQxB,UAH1E,OAIIkC,EAAgB,kCAA6B,CAC3CL,QAAS,YALf,gDAQIK,EAAgB,mCAAoC,CAClDL,QAAS,UATf,yBAYIW,GAAqB,GAZzB,4EAD0B,sDAgB1B,CAACA,EAAsBN,EAAiBD,EAAkBT,IAG5D,OACE,eAAC/C,EAAA,EAAD,yBAAKkD,EAAG,EAAGC,QAAQ,SAAYF,GAA/B,cACE,cAAC3C,EAAA,EAAD,CAAY8C,QAAQ,KAApB,+BACA,cAACpD,EAAA,EAAD,CAAKqD,GAAI,EAAT,SACE,cAAC/C,EAAA,EAAD,CAAY8C,QAAQ,QAApB,2EAIF,cAACpD,EAAA,EAAD,CAAKqE,GAAI,EAAT,SACE,cAACC,EAAA,EAAD,CACEC,MAAM,qBACNC,WAAS,EACTC,SAAU,SAACC,GACTb,EAAqBa,EAAEC,OAAOC,YAIpC,cAACC,EAAA,EAAD,CACEzB,QAAQ,YACR0B,MAAM,UACNC,UAAWnB,GAAqBE,EAChCkB,QAAS,WACPhB,EAASJ,IALb,0BCvCOqB,EAA+B,SAAC,GAKtC,IAJLzB,EAII,EAJJA,iBACAR,EAGI,EAHJA,WACAD,EAEI,EAFJA,QACGE,EACC,6DACoDU,oBAAkB,GADtE,mBACGuB,EADH,KACyBC,EADzB,KAEI1B,EAAoBC,cAApBD,gBAEF2B,EAAmBnB,sBAAW,sBAAC,sBAAApD,EAAA,yDACnCsE,GAAwB,GADW,SAG7BnC,IAAeV,EAAWE,kBAHG,gCAIzBgB,EAAiBU,QAAQmB,6BAA6BlB,KAAK,CAAEC,KAAMrB,EAAQxB,UAJlD,iCAKtByB,IAAeV,EAAWG,6BALJ,kCAMzBe,EAAiBU,QAAQoB,2BAA2BnB,KAAK,CAAEC,KAAMrB,EAAQxB,UANhD,mCAOtByB,IAAeV,EAAWI,2BAPJ,kCAQzBc,EAAiBU,QAAQqB,qBAAqBpB,KAAK,CAAEC,KAAMrB,EAAQxB,UAR1C,mCAStByB,IAAeV,EAAWK,qBATJ,kCAUzBa,EAAiBU,QAAQsB,mBAAmBrB,KAAK,CAAEC,KAAMrB,EAAQxB,UAVxC,mCAWtByB,IAAeV,EAAWM,mBAXJ,kCAYzBY,EAAiBU,QAAQuB,QAAQtB,KAAK,CAAEC,KAAMrB,EAAQxB,UAZ7B,sCAczB,IAAImE,MAAM,8BAde,0DAiBjCjC,EAAgB,mEAA2D,CACzEL,QAAS,UAlBsB,yBAqBjC+B,GAAwB,GArBS,6EAuBlC,CAACnC,EAAYQ,EAAkBT,EAASU,IAE3C,OACE,eAACzD,EAAA,EAAD,yBAAKkD,EAAG,EAAGC,QAAQ,SAAYF,GAA/B,cACE,cAAC3C,EAAA,EAAD,CAAY8C,QAAQ,KAApB,oDACA,cAACpD,EAAA,EAAD,CAAKqD,GAAI,EAAT,SACE,cAAC/C,EAAA,EAAD,CAAY8C,QAAQ,QAApB,oGAIF,cAACyB,EAAA,EAAD,CACEzB,QAAQ,YACR0B,MAAM,UACNC,SAAUG,EACVF,QAASI,EAJX,0B,6GCtBOO,GAA+B,SAAC,GAA+C,IAA7C3C,EAA4C,EAA5CA,WAAYD,EAAgC,EAAhCA,QAASS,EAAuB,EAAvBA,iBAAuB,EACvDG,mBAA0B,IAD6B,mBAClFiC,EADkF,KACvEC,EADuE,OAErClC,mBAAiB,IAFoB,mBAElFmC,EAFkF,KAE9DC,EAF8D,OAGjCpC,oBAAkB,GAHe,mBAGlFqC,EAHkF,KAG5DC,EAH4D,OAIzDtC,oBAAkB,GAJuC,mBAIlFuC,EAJkF,KAIxEC,EAJwE,KAKjF1C,EAAoBC,cAApBD,gBAEF2C,EAAiBnC,sBAAW,sBAChC,gDAAApD,EAAA,+GAEkC2C,EAAiBU,QAAQmC,mBAAmBC,OAF9E,OAKI,IAHMC,EAFV,OAGUC,EAAW,GAERC,EAAI,EAAGA,GAAKF,EAAiBE,IACpCD,EAASE,KAAKlD,EAAiBU,QAAQ0B,UAAUa,GAAGH,QAN1D,gBAQsB7E,QAAQkF,IAAIH,GARlC,OAQUI,EARV,OASUC,EAAoCD,EAAIE,KAAI,SAACC,EAAGC,GAAJ,MAAe,CAC/DC,YAAaF,EAAEE,YACfC,UAAWC,SAASJ,EAAEG,WACtBE,YAAaJ,EAAQ,GAAGK,eAE1BxB,EAAagB,GAdjB,kDAgBIpD,EAAgB,wDAAmD,CACjEL,QAAS,UAjBf,0DAqBA,CAACI,EAAkBC,IAGf6D,EAAW,uCAAG,sBAAAzG,EAAA,6DAClBoF,GAAwB,GADN,kBAGVzC,EAAiBU,QACpBoD,YAAYxB,GACZ3B,KAAK,CAAEC,KAAMrB,EAAQxB,UALR,OAMhBkC,EAAgB,wCAAmC,CACjDL,QAAS,YAPK,gDAUhBK,EAAgB,2CAA4C,CAC1DL,QAAS,UAXK,yBAchB6C,GAAwB,GAdR,4EAAH,qDAkBXsB,EAAI,uCAAG,WAAOH,GAAP,SAAAvG,EAAA,6DACXsF,GAAY,GADD,kBAGH3C,EAAiBU,QAAQqD,KAAKH,GAAYjD,KAAK,CAAEC,KAAMrB,EAAQxB,UAH5D,OAITkC,EAAgB,kCAA6B,CAC3CL,QAAS,YALF,gDAQTK,EAAgB,sBAAuB,CACrCL,QAAS,UATF,yBAYT+C,GAAY,GAZH,4EAAH,sDAgBVqB,qBAAU,WACRpB,MACC,CAACA,IAGJoB,qBAAU,WACRhE,EAAiBiE,OAAOC,mBAAxB,uCAA2C,WAAgBC,EAAYC,GAA5B,eAAA/G,EAAA,0DACrC8G,EADqC,uBAEvClE,EAAgB,2EAAyE,CACvFL,QAAS,UAH4B,0CAOfI,EAAiBU,QACxC0B,UAAUgC,EAAMC,aAAaT,YAC7Bd,OATsC,OAOnCwB,EAPmC,OAUzCjC,GAAa,SAACkC,GAAD,4BACRA,GADQ,CAEX,CACEd,YAAaa,EAAYb,YACzBC,UAAWC,SAASW,EAAYZ,WAChCE,WAAYQ,EAAMC,aAAaT,iBAfM,2CAA3C,2DAmBC,CAAC5D,EAAkBC,IAGtB,IAAMuE,EAAepC,EAAUqC,QAAO,SAACC,EAAKhF,GAAN,OAAaA,EAAEgE,UAAYgB,EAAMhF,EAAEgE,UAAYgB,IAAM,GACrFC,EAAmBvC,EAAUwC,QAAO,SAAClF,GAAD,OAAOA,EAAEgE,YAAcc,KA6BjE,OA1BAR,qBAAU,WACRhE,EAAiBiE,OAAOY,MAAxB,uCAA8B,WAAgBV,EAAYC,GAA5B,SAAA/G,EAAA,0DACxB8G,EADwB,uBAE1BlE,EACE,sGACA,CACEL,QAAS,UALa,0BAU5BnB,QAAQC,IAAI,OAAQ0F,GACpB/B,GAAa,SAACkC,GACZ,OAAOA,EAAiBjB,KAAI,SAACwB,GAC3B,OAAO,2BACFA,GADL,IAEEpB,UACEoB,EAASlB,aAAeQ,EAAMC,aAAaT,WACvCQ,EAAMC,aAAaU,eACnBD,EAASpB,kBAlBO,2CAA9B,2DAuBC,CAAC1D,EAAkBC,IAGpB,qCACE,eAACzD,EAAA,EAAD,CAAKmD,QAAQ,QAAQD,EAAG,EAAxB,UACE,cAAClD,EAAA,EAAD,CAAKqE,GAAI,EAAT,SACE,cAAC/D,EAAA,EAAD,CAAY8C,QAAQ,KAApB,gCAGoB,IAArBwC,EAAU4C,OACT,cAAClI,EAAA,EAAD,gDAEA,eAACmI,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAOC,aAAW,eAAlB,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,0BACA,cAACA,EAAA,EAAD,CAAWC,MAAM,QAAjB,yBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,eAGrB,cAACC,EAAA,EAAD,UACGpD,EAAUkB,KAAI,SAACwB,GAAD,OACb,eAACO,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWG,UAAU,KAAKC,MAAM,MAAhC,SACGZ,EAASrB,cAEZ,cAAC6B,EAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0BT,EAASpB,YACnC,eAAC4B,EAAA,EAAD,CAAWC,MAAM,QAAjB,UACGhG,EAAQO,SAAWzD,EAAcY,OAChCsC,EAAQoG,kBAAoBb,EAASlB,YACnC,cAAC,KAAD,CAAiBtC,MAAM,aAEzB/B,EAAQO,SAAWzD,EAAcY,OACL,MAA5BsC,EAAQoG,kBACR,cAACC,EAAA,EAAD,CACErE,SACEhC,EAAQO,SAAWzD,EAAcY,OACjCuC,IAAeV,EAAWK,sBAC1BuD,EAEFlB,QAAS,WACPuC,EAAKe,EAASlB,aAPlB,SAUE,cAAC,IAAD,WAtBOkB,EAASlB,oBA8B7BpE,IAAeV,EAAWK,sBACzBI,EAAQO,SAAWzD,EAAcY,QACJ,MAA5BsC,EAAQoG,gBACP,cAACnJ,EAAA,EAAD,CAAKmD,QAAQ,SAAS2B,MAAM,QAAQzE,GAAI,EAAG6C,EAAG,EAA9C,wCAIA,cAAClD,EAAA,EAAD,CAAKmD,QAAQ,QAAQ2B,MAAM,QAAQzE,GAAI,EAAG6C,EAAG,EAA7C,sCAQTF,IAAeV,EAAWG,8BACzBM,EAAQO,SAAWzD,EAAcY,OAC/B,eAACT,EAAA,EAAD,CAAKK,GAAI,EAAG8C,QAAQ,QAAQD,EAAG,EAA/B,UACE,cAAC5C,EAAA,EAAD,CAAY8C,QAAQ,KAApB,qCACA,cAACpD,EAAA,EAAD,CAAKqD,GAAI,EAAT,SACE,cAAC/C,EAAA,EAAD,CAAY8C,QAAQ,QAApB,oLAKF,cAACkB,EAAA,EAAD,CACEC,MAAM,cACNC,WAAS,EACTC,SAAU,SAACC,GACTqB,EAAsBrB,EAAEC,OAAOC,UAGnC,cAAC5E,EAAA,EAAD,CAAKK,GAAI,EAAT,SACE,cAACwE,EAAA,EAAD,CACEzB,QAAQ,YACR0B,MAAM,UACNC,UAAWe,GAAsBE,EACjChB,QAAO,sBAAE,sBAAAnE,EAAA,sDACPyG,IADO,2CAJX,0BAcPtE,IAAeV,EAAWO,cACzB,eAAC7C,EAAA,EAAD,CAAKK,GAAI,EAAG8C,QAAQ,QAAQD,EAAG,EAA/B,UACE,cAAC5C,EAAA,EAAD,CAAY8C,QAAQ,KAApB,0BACA,cAACpD,EAAA,EAAD,CAAKK,GAAI,EAAT,SACE,cAACC,EAAA,EAAD,UAC+B,IAA5B6H,EAAiBK,OAAjB,uCACmCL,EAAiB,GAAGlB,aADvD,wDAEiDkB,EAC3CrB,KAAI,SAAC5D,GAAD,OAAOA,EAAE+D,eACboC,KAAK,kBCvPbC,GAA2B,SAAC,GAAmC,IAAjCvG,EAAgC,EAAhCA,QAASS,EAAuB,EAAvBA,iBAC1CC,EAAoBC,cAApBD,gBADiE,EAErCE,mBAA4B,MAFS,mBAElEX,EAFkE,KAEtDuG,EAFsD,KAInEC,EAAkBvF,sBAAW,sBAAC,4BAAApD,EAAA,+EAET2C,EAAiBU,QAAQuF,iBAAiBnD,OAFjC,OAE1BoD,EAF0B,OAGhCH,EAAcpC,SAASuC,IAHS,gDAKhCjG,EAAgB,6DAAqD,CACnEL,QAAS,UANqB,yDASjC,CAACI,EAAkBC,IAmBtB,OAjBA+D,qBAAU,WACRgC,MACC,CAACA,IAGJhC,qBAAU,WACRhE,EAAiBiE,OAAOkC,qBAAxB,uCAA6C,WAAgBhC,EAAYC,GAA5B,SAAA/G,EAAA,0DACvC8G,EADuC,uBAEzClE,EAAgB,4EAAuE,CACrFL,QAAS,UAH8B,0BAO3CmG,EAAcpC,SAASS,EAAMC,aAAa+B,YAPC,2CAA7C,2DASC,CAACpG,EAAkBC,IAEH,OAAfT,EACK,cAAC,EAAD,CAAQjD,QAAQ,wEAIvB,qCACE,cAACC,EAAA,EAAD,CAAKqE,GAAI,EAAT,SACE,cAACwF,EAAA,EAAD,CAASC,WAA2B,OAAf9G,EAAsBA,GAAc,EAAG+G,kBAAgB,EAA5E,SACGC,OAAOC,OAAO3H,GACZ8F,QAAO,SAAC8B,GAAD,MAAoB,kBAANA,KACrBpD,KAAI,SAACoD,GACJ,OACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UAAY7H,EAAgB2H,MADnBA,UAOrB,eAACG,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAzB,UACE,eAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,UACE,cAAC,EAAD,CAAwB1H,QAASA,EAASC,WAAYA,IACrDA,IAAeV,EAAWE,mBACzBO,EAAQO,SAAWzD,EAAcW,eAC/B,cAAC,EAAD,CAAmBH,GAAI,EAAG0C,QAASA,EAASS,iBAAkBA,IAEjER,IAAeV,EAAWO,cACzBE,EAAQO,SAAWzD,EAAcW,eAC/B,cAAC,EAAD,CACEH,GAAI,EACJ0C,QAASA,EACTS,iBAAkBA,EAClBR,WAAYA,OAIpB,cAACqH,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,cAAC,GAAD,CACE1H,QAASA,EACTS,iBAAkBA,EAClBR,WAAYA,aC/EX0H,GAAoB,WAAO,IAC9BjH,EAAoBC,cAApBD,gBAD6B,EAEbE,mBAAsB,MAFT,mBAE9B/C,EAF8B,KAExB+J,EAFwB,OAGWhH,mBAAc,MAHzB,mBAG9BH,EAH8B,KAGZoH,EAHY,OAImBjH,mBAAwB,MAJ3C,mBAI9BkH,EAJ8B,KAIRC,EAJQ,OAKOnH,mBAAwB,MAL/B,mBAK9BoH,EAL8B,KAKdC,EALc,OAMPrH,mBAAyB,MANlB,mBAM9BZ,EAN8B,KAMrBkI,EANqB,KAQ/BC,EAAOjH,sBAAW,sBAAC,gCAAApD,EAAA,+EAEFW,IAFE,cAEfZ,EAFe,gBAGUD,EAAoBC,GAH9B,cAGf4C,EAHe,gBAIMA,EAAiBU,QAAQiH,QAAQ7E,OAJvC,OAIf8E,EAJe,OAKrBT,EAAQ/J,GACRgK,EAAoBpH,GACpBsH,EAAwBM,GAPH,kDASrBnJ,QAAQoJ,KAAR,MACA5H,EACE,mFACA,CACEL,QAAS,UAbQ,0DAiBtB,CAACK,IAEE6H,EAAuBrH,sBAAW,sBAAC,4BAAApD,EAAA,yDAClCkK,EADkC,8DAQnCF,GACAE,EAAeQ,gBAAkBV,EAAqBU,cATnB,uBAWnCN,EAAW,CACT3H,OAAQzD,EAAcW,cACtBe,QAASwJ,IAbwB,0CAiBnBvH,EAAiBU,QAAQsH,OAAOT,GAAgBzE,OAjB7B,QAiB/BM,EAjB+B,QAkB7B6E,aACNR,EAAW,CACT3H,OAAQzD,EAAcY,MACtB0I,gBAAiBvC,EAAIuC,gBACrB5H,QAASwJ,IAGXE,EAAW,CACT3H,OAAQzD,EAAca,QACtBa,QAASwJ,IA3BwB,kDA+BrCtH,EAAgB,6DAAqD,CACnEL,QAAS,UAhC0B,0DAmCtC,CAAC2H,EAAgBF,EAAsBrH,EAAkBC,IAqE5D,OAlEA+D,qBAAU,WACR0D,MACC,CAACA,IAGJ1D,qBAAU,WACH5G,IAKLA,EAAKE,IACF4K,cACAC,MAAK,SAACC,GACLZ,EAAkBY,EAAS,OAE5BC,OAAM,WACLpI,EAAgB,wEAAgE,CAC9EL,QAAS,aAKdxB,OAAeE,SAASgK,GAAG,mBAAmB,SAACF,GAC9CnI,EAAgB,kEAA0D,CACxEL,QAAS,SAEX4H,EAAkBY,EAAS,UAE5B,CAAChL,EAAM6C,IAGV+D,qBAAU,WACR8D,MACC,CAACA,IAGJ9D,qBAAU,WACHhE,GAGLA,EAAiBiE,OAAOY,MAAxB,uCAA8B,WAAgBV,EAAYC,GAA5B,SAAA/G,EAAA,0DACxB8G,EADwB,uBAE1BlE,EACE,2JACA,CACEL,QAAS,UALa,0BAU5B6H,GAAW,SAACc,GACV,OACEA,GACAA,EAAexK,QAAQgK,gBAAkB3D,EAAMC,aAAamE,MAAMT,cAE3D,2BACFQ,GADL,IAEE5C,gBAAiBvB,EAAMC,aAAaT,aAGjC2E,KApBmB,2CAA9B,2DAuBC,CAACvI,EAAkBC,IAEjB7C,GAAS4C,GAAqBqH,EAM9B9H,EAIE,cAAC,GAAD,CAAeA,QAASA,EAASS,iBAAkBA,IAHjD,cAAC,EAAD,CAAQzD,QAAQ,+EALrB,cAAC,EAAD,CAAQA,QAAQ,sFCtHPkM,OAnBf,WACE,OACE,eAAC,IAAD,CAAkBC,SAAU,EAAGC,aAAc,CAAEC,WAAY,QAASC,SAAU,OAA9E,UACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,cAACvM,EAAA,EAAD,CAAKkD,EAAG,EAAR,SACE,cAAC5C,EAAA,EAAD,CAAY8C,QAAQ,KAAK2F,MAAM,SAA/B,+BAKJ,cAAC/I,EAAA,EAAD,CAAKK,GAAI,EAAT,SACE,cAACmM,EAAA,EAAD,CAAWC,SAAS,KAApB,SACE,cAAC,GAAD,YCHKC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,UCHdO,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAACC,GAAA,EAAD,IACA,cAAC,GAAD,OAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.510c87ad.chunk.js","sourcesContent":["export enum AccountStatus {\n  Administrator,\n  Voter,\n  Unknown,\n}\n\nexport type Account =\n  | {\n      status: AccountStatus.Administrator;\n      address: string;\n    }\n  | {\n      status: AccountStatus.Voter;\n      votedProposalId: string;\n      address: string;\n    }\n  | {\n      status: AccountStatus.Unknown;\n      address: string;\n    };\n\nexport const AccountsStatusLabel: { [key in AccountStatus]: string } = {\n  [AccountStatus.Administrator]: 'Administrateur',\n  [AccountStatus.Voter]: 'Votant',\n  [AccountStatus.Unknown]: 'Inconnu',\n};\n","import { Box, CircularProgress, Typography } from '@material-ui/core';\nimport React, { FC } from 'react';\n\ntype Props = {\n  message: string;\n};\n\nexport const Loader: FC<Props> = ({ message }) => {\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" alignItems=\"center\">\n      <CircularProgress />\n      <Box mt={4}>\n        <Typography>{message}</Typography>\n      </Box>\n    </Box>\n  );\n};\n","import Voting from 'src/contracts/Voting.json';\nimport Web3 from 'web3';\n\nexport const getContractInstance = async (web3: Web3) => {\n  const networkId: any = await web3.eth.net.getId();\n  const deployedNetwork = Voting.networks[networkId as '5777'];\n  return new web3.eth.Contract(Voting.abi as any, deployedNetwork && deployedNetwork.address);\n};\n","import Web3 from 'web3';\n\nexport async function getWeb3(): Promise<Web3> {\n  return new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    (window as any).addEventListener('load', async () => {\n      // Modern dapp browsers...\n      if ((window as any).ethereum) {\n        const web3 = new Web3((window as any).ethereum);\n        try {\n          // Request account access if needed\n          await (window as any).ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if ((window as any).web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = (window as any).web3;\n        console.log('Injected web3 detected.');\n        resolve(web3 as Web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider('http://127.0.0.1:7545');\n        const web3 = new Web3(provider);\n        console.log('No web3 instance injected, using Local web3.');\n        resolve(web3);\n      }\n    });\n  });\n}\n","export enum VoteStatus {\n  RegisteringVoters = 0,\n  ProposalsRegistrationStarted = 1,\n  ProposalsRegistrationEnded = 2,\n  VotingSessionStarted = 3,\n  VotingSessionEnded = 4,\n  VotesTallied = 5,\n}\n\nexport const VoteStatusLabel: { [key in VoteStatus]: string } = {\n  [VoteStatus.RegisteringVoters]: 'Enregistrement des votants',\n  [VoteStatus.ProposalsRegistrationStarted]: 'Ajouts des propositions',\n  [VoteStatus.ProposalsRegistrationEnded]: 'Vote à venir',\n  [VoteStatus.VotingSessionStarted]: 'Vote en cours',\n  [VoteStatus.VotingSessionEnded]: 'Vote terminé',\n  [VoteStatus.VotesTallied]: 'Résultats',\n};\n","import { Box, BoxProps, Typography } from '@material-ui/core';\nimport { FC } from 'react';\nimport { Account, AccountsStatusLabel, AccountStatus } from 'src/constants/account';\nimport { VoteStatus } from 'src/constants/voteStatus';\n\ntype Props = {\n  account: Account;\n  voteStatus: VoteStatus;\n} & BoxProps;\n\nexport const AccountStatusContainer: FC<Props> = ({ account, voteStatus, ...boxProps }) => {\n  return (\n    <Box p={2} bgcolor=\"white\" {...boxProps}>\n      <Typography variant=\"h6\">Votre compte</Typography>\n      <Box my={1}>\n        <Typography variant=\"body1\">Statut : {AccountsStatusLabel[account.status]}</Typography>\n      </Box>\n      <Box my={1}>\n        <Typography variant=\"body1\">Addresse : {account.address}</Typography>\n      </Box>\n      {voteStatus === VoteStatus.RegisteringVoters && account.status === AccountStatus.Unknown && (\n        <Typography>\n          Pour participer au vote, l'administrateur du vote doit vous ajouter.\n        </Typography>\n      )}\n    </Box>\n  );\n};\n","import { Box, BoxProps, Typography, TextField, Button } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport React, { FC, useCallback, useState } from 'react';\nimport { Account } from 'src/constants/account';\n\ntype Props = {\n  account: Account;\n  contractInstance: any;\n} & BoxProps;\n\nexport const AddVoterContainer: FC<Props> = ({ account, contractInstance, ...boxProps }) => {\n  const { enqueueSnackbar } = useSnackbar();\n  const [addressInputValue, setAddressInputValue] = useState<string>('');\n  const [isAddVoterPending, setIsAddVoterPending] = useState<boolean>(false);\n\n  const addVoter = useCallback(\n    async (address: string) => {\n      setIsAddVoterPending(true);\n      try {\n        await contractInstance.methods.addVoter(address).send({ from: account.address });\n        enqueueSnackbar('Votant ajouté avec succès', {\n          variant: 'success',\n        });\n      } catch (e) {\n        enqueueSnackbar(\"Erreur lors de l'ajout du votant\", {\n          variant: 'error',\n        });\n      } finally {\n        setIsAddVoterPending(false);\n      }\n    },\n    [setIsAddVoterPending, enqueueSnackbar, contractInstance, account]\n  );\n\n  return (\n    <Box p={2} bgcolor=\"white\" {...boxProps}>\n      <Typography variant=\"h6\">Ajouter un votant</Typography>\n      <Box my={1}>\n        <Typography variant=\"body1\">\n          Indiquez l'adresse d'une personne à ajouter comme votant\n        </Typography>\n      </Box>\n      <Box mb={2}>\n        <TextField\n          label=\"Addresse du votant\"\n          fullWidth\n          onChange={(e) => {\n            setAddressInputValue(e.target.value);\n          }}\n        />\n      </Box>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={!addressInputValue || isAddVoterPending}\n        onClick={() => {\n          addVoter(addressInputValue);\n        }}\n      >\n        Valider\n      </Button>\n    </Box>\n  );\n};\n","import React, { FC, useCallback, useState } from 'react';\nimport { VoteStatus } from 'src/constants/voteStatus';\nimport { Account } from 'src/constants/account';\nimport { useSnackbar } from 'notistack';\nimport { Box, BoxProps, Button, Typography } from '@material-ui/core';\n\ntype Props = {\n  contractInstance: any;\n  voteStatus: VoteStatus;\n  account: Account;\n} & BoxProps;\n\nexport const NextStepContainer: FC<Props> = ({\n  contractInstance,\n  voteStatus,\n  account,\n  ...boxProps\n}) => {\n  const [isUpdatingVoteStatus, setIsUpdatingVoteStatus] = useState<boolean>(false);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const updateVoteStatus = useCallback(async () => {\n    setIsUpdatingVoteStatus(true);\n    try {\n      if (voteStatus === VoteStatus.RegisteringVoters) {\n        await contractInstance.methods.startProposalsRegistration().send({ from: account.address });\n      } else if (voteStatus === VoteStatus.ProposalsRegistrationStarted) {\n        await contractInstance.methods.endProposalsRegistration().send({ from: account.address });\n      } else if (voteStatus === VoteStatus.ProposalsRegistrationEnded) {\n        await contractInstance.methods.startVotingSession().send({ from: account.address });\n      } else if (voteStatus === VoteStatus.VotingSessionStarted) {\n        await contractInstance.methods.endVotingSession().send({ from: account.address });\n      } else if (voteStatus === VoteStatus.VotingSessionEnded) {\n        await contractInstance.methods.tally().send({ from: account.address });\n      } else {\n        throw new Error('INVALID_VOTE_STATUS_UPDATE');\n      }\n    } catch (e) {\n      enqueueSnackbar(\"Erreur : le vote n'a pas pu être mis à l'étape suivante\", {\n        variant: 'error',\n      });\n    } finally {\n      setIsUpdatingVoteStatus(false);\n    }\n  }, [voteStatus, contractInstance, account, enqueueSnackbar]);\n\n  return (\n    <Box p={2} bgcolor=\"white\" {...boxProps}>\n      <Typography variant=\"h6\">Aller à l'étape suivante du vote</Typography>\n      <Box my={1}>\n        <Typography variant=\"body1\">\n          En tant qu'administrateur c'est vous qui devez activer la prochaine étape du vote\n        </Typography>\n      </Box>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        disabled={isUpdatingVoteStatus}\n        onClick={updateVoteStatus}\n      >\n        Valider\n      </Button>\n    </Box>\n  );\n};\n","import {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n  IconButton,\n  TextField,\n  Button,\n} from '@material-ui/core';\nimport React, { FC, useState, useCallback, useEffect } from 'react';\nimport HowToVoteIcon from '@material-ui/icons/HowToVote';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport { useSnackbar } from 'notistack';\nimport { VoteStatus } from 'src/constants/voteStatus';\nimport { Account, AccountStatus } from 'src/constants/account';\n\ninterface Proposal {\n  description: string;\n  voteCount: number;\n  proposalId: string;\n}\n\ntype Props = {\n  voteStatus: VoteStatus;\n  contractInstance: any;\n  account: Account;\n};\n\nexport const ProposalContainer: FC<Props> = ({ voteStatus, account, contractInstance }) => {\n  const [proposals, setProposals] = useState<Array<Proposal>>([]);\n  const [proposalInputValue, setProposalInputValue] = useState<string>('');\n  const [isAddProposalPending, setIsAddProposalPending] = useState<boolean>(false);\n  const [isVoting, setIsVoting] = useState<boolean>(false);\n  const { enqueueSnackbar } = useSnackbar();\n\n  const fetchProposals = useCallback(\n    async (refreshAll: boolean = false) => {\n      try {\n        const proposalsLength = await contractInstance.methods.getProposalCount().call();\n        const promises = [];\n        // Proposal[0] is a fake proposal to avoid false winning proposal (check contract for extra details)\n        for (let i = 1; i <= proposalsLength; i++) {\n          promises.push(contractInstance.methods.proposals(i).call());\n        }\n        const res = await Promise.all(promises);\n        const fetchedProposals: Array<Proposal> = res.map((r, index) => ({\n          description: r.description,\n          voteCount: parseInt(r.voteCount),\n          proposalId: (index + 1).toString(),\n        }));\n        setProposals(fetchedProposals);\n      } catch (e) {\n        enqueueSnackbar('Erreur lors de la récupération des propositions', {\n          variant: 'error',\n        });\n      }\n    },\n    [contractInstance, enqueueSnackbar]\n  );\n\n  const addProposal = async () => {\n    setIsAddProposalPending(true);\n    try {\n      await contractInstance.methods\n        .addProposal(proposalInputValue)\n        .send({ from: account.address });\n      enqueueSnackbar('Proposition ajoutée avec succès', {\n        variant: 'success',\n      });\n    } catch (e) {\n      enqueueSnackbar(\"Erreur lors de l'ajout de la proposition\", {\n        variant: 'error',\n      });\n    } finally {\n      setIsAddProposalPending(false);\n    }\n  };\n\n  const vote = async (proposalId: string) => {\n    setIsVoting(true);\n    try {\n      await contractInstance.methods.vote(proposalId).send({ from: account.address });\n      enqueueSnackbar('Vote effectué avec succès', {\n        variant: 'success',\n      });\n    } catch (e) {\n      enqueueSnackbar('Erreur lors du vote', {\n        variant: 'error',\n      });\n    } finally {\n      setIsVoting(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchProposals();\n  }, [fetchProposals]);\n\n  // Listen for added proposal\n  useEffect(() => {\n    contractInstance.events.ProposalRegistered(async function (error: any, event: any) {\n      if (error) {\n        enqueueSnackbar(\"Erreur lors de l'ajout d'une nouvelle proposition, songez à recharger\", {\n          variant: 'error',\n        });\n        return;\n      }\n      const newProposal = await contractInstance.methods\n        .proposals(event.returnValues.proposalId)\n        .call();\n      setProposals((currentProposals) => [\n        ...currentProposals,\n        {\n          description: newProposal.description,\n          voteCount: parseInt(newProposal.voteCount),\n          proposalId: event.returnValues.proposalId,\n        },\n      ]);\n    });\n  }, [contractInstance, enqueueSnackbar]);\n\n  // maximum vote count for one proposal\n  const maxVoteCount = proposals.reduce((acc, p) => (p.voteCount > acc ? p.voteCount : acc), 0);\n  const winningProposals = proposals.filter((p) => p.voteCount === maxVoteCount);\n\n  // Listen for vote on proposal\n  useEffect(() => {\n    contractInstance.events.Voted(async function (error: any, event: any) {\n      if (error) {\n        enqueueSnackbar(\n          'Erreur lors de la mise à jour des propositions suite à un vote, songez à recharger la page',\n          {\n            variant: 'error',\n          }\n        );\n        return;\n      }\n      console.log('nice', event);\n      setProposals((currentProposals) => {\n        return currentProposals.map((proposal) => {\n          return {\n            ...proposal,\n            voteCount:\n              proposal.proposalId === event.returnValues.proposalId\n                ? event.returnValues.totalVoteCount\n                : proposal.voteCount,\n          };\n        });\n      });\n    });\n  }, [contractInstance, enqueueSnackbar]);\n\n  return (\n    <>\n      <Box bgcolor=\"white\" p={2}>\n        <Box mb={2}>\n          <Typography variant=\"h6\">Les propositions</Typography>\n        </Box>\n\n        {proposals.length === 0 ? (\n          <Typography>Aucune proposition pour le moment</Typography>\n        ) : (\n          <TableContainer>\n            <Table aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Description</TableCell>\n                  <TableCell align=\"right\">Nb de votes</TableCell>\n                  <TableCell align=\"right\"></TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {proposals.map((proposal) => (\n                  <TableRow key={proposal.proposalId}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {proposal.description}\n                    </TableCell>\n                    <TableCell align=\"right\">{proposal.voteCount}</TableCell>\n                    <TableCell align=\"right\">\n                      {account.status === AccountStatus.Voter &&\n                        account.votedProposalId === proposal.proposalId && (\n                          <CheckCircleIcon color=\"primary\" />\n                        )}\n                      {(account.status !== AccountStatus.Voter ||\n                        account.votedProposalId === '0') && (\n                        <IconButton\n                          disabled={\n                            account.status !== AccountStatus.Voter ||\n                            voteStatus !== VoteStatus.VotingSessionStarted ||\n                            isVoting\n                          }\n                          onClick={() => {\n                            vote(proposal.proposalId);\n                          }}\n                        >\n                          <HowToVoteIcon />\n                        </IconButton>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n            {voteStatus === VoteStatus.VotingSessionStarted &&\n              account.status === AccountStatus.Voter &&\n              (account.votedProposalId === '0' ? (\n                <Box bgcolor=\"orange\" color=\"white\" mt={2} p={2}>\n                  C'est le moment de voter !\n                </Box>\n              ) : (\n                <Box bgcolor=\"green\" color=\"white\" mt={2} p={2}>\n                  Vous avez voté\n                </Box>\n              ))}\n          </TableContainer>\n        )}\n      </Box>\n\n      {voteStatus === VoteStatus.ProposalsRegistrationStarted &&\n        account.status === AccountStatus.Voter && (\n          <Box mt={4} bgcolor=\"white\" p={2}>\n            <Typography variant=\"h6\">Ajouter une proposition</Typography>\n            <Box my={3}>\n              <Typography variant=\"body1\">\n                Durant cette étape du vote, vous pouvez en tant que votant faire des propositions\n                qui pourront être voté lors de la phase de vote à proprement parlé.\n              </Typography>\n            </Box>\n            <TextField\n              label=\"Proposition\"\n              fullWidth\n              onChange={(e) => {\n                setProposalInputValue(e.target.value);\n              }}\n            />\n            <Box mt={2}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={!proposalInputValue || isAddProposalPending}\n                onClick={async () => {\n                  addProposal();\n                }}\n              >\n                Ajouter\n              </Button>\n            </Box>\n          </Box>\n        )}\n\n      {voteStatus === VoteStatus.VotesTallied && (\n        <Box mt={4} bgcolor=\"white\" p={2}>\n          <Typography variant=\"h6\">Résultats</Typography>\n          <Box mt={2}>\n            <Typography>\n              {winningProposals.length === 1\n                ? `Victoire de la proposition : ${winningProposals[0].description}`\n                : `Egalité entre les propositions suivantes : ${winningProposals\n                    .map((p) => p.description)\n                    .join(', ')}`}\n            </Typography>\n          </Box>\n        </Box>\n      )}\n    </>\n  );\n};\n","import { Box, Step, StepLabel, Stepper, Grid } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport React, { FC, useCallback, useEffect, useState } from 'react';\nimport { Loader } from 'src/components/Loader';\nimport { Account, AccountStatus } from 'src/constants/account';\nimport { VoteStatus, VoteStatusLabel } from 'src/constants/voteStatus';\nimport { AccountStatusContainer } from './AccountStatus';\nimport { AddVoterContainer } from './AddVoter';\nimport { NextStepContainer } from './NextStep';\nimport { ProposalContainer } from './Proposal';\n\ntype Props = {\n  account: Account;\n  contractInstance: any;\n};\n\nexport const MainContainer: FC<Props> = ({ account, contractInstance }) => {\n  const { enqueueSnackbar } = useSnackbar();\n  const [voteStatus, setVoteStatus] = useState<VoteStatus | null>(null);\n\n  const fetchVoteStatus = useCallback(async () => {\n    try {\n      const response = await contractInstance.methods.workflowStatus().call();\n      setVoteStatus(parseInt(response));\n    } catch {\n      enqueueSnackbar(\"Erreur lors de la récupération de l'étape du vote\", {\n        variant: 'error',\n      });\n    }\n  }, [contractInstance, enqueueSnackbar]);\n\n  useEffect(() => {\n    fetchVoteStatus();\n  }, [fetchVoteStatus]);\n\n  // Listen for vote status update\n  useEffect(() => {\n    contractInstance.events.WorkflowStatusChange(async function (error: any, event: any) {\n      if (error) {\n        enqueueSnackbar('Erreur lors de la mise à jour du status du vote, songez à recharger', {\n          variant: 'error',\n        });\n        return;\n      }\n      setVoteStatus(parseInt(event.returnValues.newStatus));\n    });\n  }, [contractInstance, enqueueSnackbar]);\n\n  if (voteStatus === null) {\n    return <Loader message=\"Récupération de l'étape du vote ... Veuillez patienter ...\" />;\n  }\n\n  return (\n    <>\n      <Box mb={4}>\n        <Stepper activeStep={voteStatus !== null ? voteStatus : -1} alternativeLabel>\n          {Object.values(VoteStatus)\n            .filter((k) => typeof k !== 'string')\n            .map((k: any) => {\n              return (\n                <Step key={k}>\n                  <StepLabel>{VoteStatusLabel[k as VoteStatus]}</StepLabel>\n                </Step>\n              );\n            })}\n        </Stepper>\n      </Box>\n      <Grid container spacing={4}>\n        <Grid item xs={6}>\n          <AccountStatusContainer account={account} voteStatus={voteStatus} />\n          {voteStatus === VoteStatus.RegisteringVoters &&\n            account.status === AccountStatus.Administrator && (\n              <AddVoterContainer mt={4} account={account} contractInstance={contractInstance} />\n            )}\n          {voteStatus !== VoteStatus.VotesTallied &&\n            account.status === AccountStatus.Administrator && (\n              <NextStepContainer\n                mt={4}\n                account={account}\n                contractInstance={contractInstance}\n                voteStatus={voteStatus}\n              />\n            )}\n        </Grid>\n        <Grid item xs={6}>\n          <ProposalContainer\n            account={account}\n            contractInstance={contractInstance}\n            voteStatus={voteStatus}\n          />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n","import { useSnackbar } from 'notistack';\nimport { FC, useCallback, useEffect, useState } from 'react';\nimport { Loader } from 'src/components/Loader';\nimport { Account, AccountStatus } from 'src/constants/account';\nimport { getContractInstance } from 'src/utils/getContractInstance';\nimport { getWeb3 } from 'src/utils/web3';\nimport Web3 from 'web3';\nimport { MainContainer } from './Main';\n\nexport const Web3Container: FC = () => {\n  const { enqueueSnackbar } = useSnackbar();\n  const [web3, setWeb3] = useState<Web3 | null>(null);\n  const [contractInstance, setContractInstance] = useState<any>(null);\n  const [contractOwnerAddress, setContractOwnerAddress] = useState<string | null>(null);\n  const [accountAddress, setAccountAddress] = useState<string | null>(null);\n  const [account, setAccount] = useState<Account | null>(null);\n\n  const init = useCallback(async () => {\n    try {\n      const web3 = await getWeb3();\n      const contractInstance = await getContractInstance(web3);\n      const ownerAddress = await contractInstance.methods.owner().call();\n      setWeb3(web3);\n      setContractInstance(contractInstance);\n      setContractOwnerAddress(ownerAddress);\n    } catch (e) {\n      console.warn(e);\n      enqueueSnackbar(\n        \"Erreur lors de l'initialisation de Web3, vérifiez votre connexion métamask\",\n        {\n          variant: 'error',\n        }\n      );\n    }\n  }, [enqueueSnackbar]);\n\n  const refreshAccountStatus = useCallback(async () => {\n    if (!accountAddress) {\n      return;\n    }\n    try {\n      // case isn't consistent\n      // but 'a' and 'A' it's the same for network\n      if (\n        contractOwnerAddress &&\n        accountAddress.toLowerCase() === contractOwnerAddress.toLowerCase()\n      ) {\n        setAccount({\n          status: AccountStatus.Administrator,\n          address: accountAddress,\n        });\n        return;\n      }\n      const res = await contractInstance.methods.voters(accountAddress).call();\n      if (res.isRegistered) {\n        setAccount({\n          status: AccountStatus.Voter,\n          votedProposalId: res.votedProposalId,\n          address: accountAddress,\n        });\n      } else {\n        setAccount({\n          status: AccountStatus.Unknown,\n          address: accountAddress,\n        });\n      }\n    } catch (e) {\n      enqueueSnackbar('Erreur lors de récupération des détails du compte', {\n        variant: 'error',\n      });\n    }\n  }, [accountAddress, contractOwnerAddress, contractInstance, enqueueSnackbar]);\n\n  // 1 - Initialize Web3 and Contract instances\n  useEffect(() => {\n    init();\n  }, [init]);\n\n  // 2 - Handle metamask accounts and change event\n  useEffect(() => {\n    if (!web3) {\n      return;\n    }\n\n    // Get current accounts\n    web3.eth\n      .getAccounts()\n      .then((accounts: Array<string>) => {\n        setAccountAddress(accounts[0]);\n      })\n      .catch(() => {\n        enqueueSnackbar('Erreur lors de la récupération du compte activé sur Metamask', {\n          variant: 'error',\n        });\n      });\n\n    // Registering for account change\n    (window as any).ethereum.on('accountsChanged', (accounts: Array<string>) => {\n      enqueueSnackbar('Changement de compte détecté, mise à jour en cours ...', {\n        variant: 'info',\n      });\n      setAccountAddress(accounts[0]);\n    });\n  }, [web3, enqueueSnackbar]);\n\n  // 3 - Get account details\n  useEffect(() => {\n    refreshAccountStatus();\n  }, [refreshAccountStatus]);\n\n  // Listen for account vote action\n  useEffect(() => {\n    if (!contractInstance) {\n      return;\n    }\n    contractInstance.events.Voted(async function (error: any, event: any) {\n      if (error) {\n        enqueueSnackbar(\n          \"Erreur : Un vote a eu lieu mais nous n'avons pas réussi à déterminer si il s'agissait du vote, si tel est le cas songez à recharger la page.\",\n          {\n            variant: 'error',\n          }\n        );\n        return;\n      }\n      setAccount((currentAccount) => {\n        if (\n          currentAccount &&\n          currentAccount.address.toLowerCase() === event.returnValues.voter.toLowerCase()\n        ) {\n          return {\n            ...currentAccount,\n            votedProposalId: event.returnValues.proposalId,\n          };\n        }\n        return currentAccount;\n      });\n    });\n  }, [contractInstance, enqueueSnackbar]);\n\n  if (!web3 || !contractInstance || !contractOwnerAddress) {\n    return (\n      <Loader message=\"Initialisation de web3... Veuillez activer votre compte Metamask et patienter...\" />\n    );\n  }\n\n  if (!account) {\n    return <Loader message=\"Récupération des données de votre compte... Veuillez patienter...\" />;\n  }\n\n  return <MainContainer account={account} contractInstance={contractInstance} />;\n};\n","import { Container, Typography, AppBar, Box } from '@material-ui/core';\nimport { SnackbarProvider } from 'notistack';\nimport React from 'react';\nimport { Web3Container } from './containers/Web3';\n\nfunction App() {\n  return (\n    <SnackbarProvider maxSnack={3} anchorOrigin={{ horizontal: 'right', vertical: 'top' }}>\n      <AppBar position=\"static\">\n        <Box p={2}>\n          <Typography variant=\"h4\" align=\"center\">\n            Voting system\n          </Typography>\n        </Box>\n      </AppBar>\n      <Box mt={4}>\n        <Container maxWidth=\"xl\">\n          <Web3Container />\n        </Container>\n      </Box>\n    </SnackbarProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CssBaseline } from '@material-ui/core';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}